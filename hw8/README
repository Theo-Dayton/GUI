CS86 -- Theo Dayton

For HW8: Current functionality is the speed up and speed down which changes the
speed at which the ships move. The toggle button also allows the user to stop
and resume the movement of the ships. When the toggle button is pressed, 
interacting with the speed up and speed down buttons is not allowed, so the
user is not allowed to press those buttons until the user resumes the movement.
There is a "Zoom In" button which will change the position off the ships based
off of their positions in the screen. "Zoom Out" will do the same effect but in
the opposite direction. "Reset Zoom" will reset the changes applied by the
previous two buttons.
There is also a combobox, a scrollbar with a label, and an "add ship" button,
which will add the type of ship that was selected in the combobox, with the
length specified in the scrollbar. Then the "Delete ship" button will delete
any ship selected by the user. If the user fails to select one it will say so
in the console. Finally the "Clear all" button will delete all ships on screen.
The "Play" button will allow the user to start playing to score points. When
this button is pressed, the "Speed Up", "Slow Down", "Zoom In", "Zoom Out", 
"Reset Zoom", "Add Ship", and "Clear All" buttons are all disabled so the user
does not tamper with the ships. The toggle button is removed and replaced with
a jpanel which allows the user to choose a difficulty setting. The difficulty
determines the rate at which new ships spawn.
The combo box and the scrollbar are also removed when the player pressed "Play".
This button will also add a "Score" label which will keep track and display the
current score. The user can select ships by clicking on them in the canvas,
and when doing so will unselect any other that was previously selected. The
program also has a layout that changes based on the size of the window.
If the window is too small the layout will change to take up less space.
For example, when the window get small enough, the speedup and
slowdown button will dissapear, as well as the scrollbar and label at the top.

Collisions: The program implements collision detection in the sense
that, when adding ships, the program will detect whether it collides with any
of the other ships. If they do, it will look for another place to create the
ship. If it takes too long to find space, it will stop the search and say so in
the console. Also, if two ships collide, it will say so in the console, and 
one of the ships will be removed, signifying it has been destroyed. When a ship
hits the border of the screen, the program will also detect it, and remove it.

Ships are currently spawned every 3 seconds, and they can move in any of the
4 cardinal directions. The direction and the type of ship is randomized

Instructions on how to gain points when playing:
The goal is to make as many ships collide while minimizing the number of ships
that go off the screen.
When playing, there are two ways to gain or lose points. If two ships collide
the user will gain 1 point, if a ship reaches the end of the screen, the user
will lose 1 point. The user can affect which ships reach the end by selecting
them and deleting them.


How to compile and run:
(I included a bash script (compile.sh), that when run should compile and run
the program. If it doesn't work the following steps should do the trick)
1 - javac Main.java
2 - java Main


Encapsulation design choices:

    Main:
        -Main class has all of its panels and widgets as private so only it
        can access them directly

    Canvas:
        -It takes in Main and a Model and stores them as protected variables

    Model:
        -Creates a private ArrayList of ships and calls on their functions.
        Besides the public functions it can call on the ships, it does not
        have access to anything else within the Ship class and subclasses.

    Ship:
        -The Ship class contains functions for all of its functionalities,
        including drawing its subclasses and getting information from them.
        It has protected variables that can only be edited by its subclasses.
        The subclasses have access to their own methods, which other
        subclasses can't access. The main Ship class is also abstract so one
        cannot make an instance of a Ship

